{"remainingRequest":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!F:\\代码\\Vue 代码\\erabbit-client-pc-124\\src\\components\\library\\xtx-pagination.vue?vue&type=style&index=0&id=e38dfd8a&scoped=true&lang=less","dependencies":[{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\src\\components\\library\\xtx-pagination.vue","mtime":1621243079000},{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\css-loader\\dist\\cjs.js","mtime":1656924650500},{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1656924654019},{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\postcss-loader\\src\\index.js","mtime":1656924651883},{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\less-loader\\dist\\cjs.js","mtime":1656924651368},{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\style-resources-loader\\lib\\index.js","mtime":1656924651644},{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656924649801},{"path":"F:\\代码\\Vue 代码\\erabbit-client-pc-124\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1656924653036}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci54dHgtcGFnaW5hdGlvbiB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBwYWRkaW5nOiAzMHB4OwogID4gYSB7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBwYWRkaW5nOiA1cHggMTBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNlNGU0ZTQ7CiAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgICAmOmhvdmVyIHsKICAgICAgY29sb3I6IEB4dHhDb2xvcjsKICAgIH0KICAgICYuYWN0aXZlIHsKICAgICAgYmFja2dyb3VuZDogQHh0eENvbG9yOwogICAgICBjb2xvcjogI2ZmZjsKICAgICAgYm9yZGVyLWNvbG9yOiBAeHR4Q29sb3I7CiAgICB9CiAgICAmLmRpc2FibGVkIHsKICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDsKICAgICAgb3BhY2l0eTogMC40OwogICAgICAmOmhvdmVyIHsKICAgICAgICBjb2xvcjogIzMzMwogICAgICB9CiAgICB9CiAgfQogID4gc3BhbiB7CiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgfQp9Cg=="},{"version":3,"sources":["F:\\代码\\Vue 代码\\erabbit-client-pc-124\\src\\components\\library\\xtx-pagination.vue"],"names":[],"mappings":";AA4FA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACb,EAAE,EAAE;IACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACN,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB;IACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB;IACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACN,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACZ;IACF;EACF;EACA,EAAE,CAAC,CAAC,CAAC,EAAE;IACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpB;AACF","file":"F:/代码/Vue 代码/erabbit-client-pc-124/src/components/library/xtx-pagination.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"xtx-pagination\">\n    <a @click=\"changePager(myCurrentPage-1)\" v-if=\"myCurrentPage>1\" href=\"javascript:;\">上一页</a>\n    <a v-else href=\"javascript:;\" class=\"disabled\">上一页</a>\n    <span v-if=\"pager.start>1\">...</span>\n    <a @click=\"changePager(i)\" href=\"javascript:;\" v-for=\"i in pager.btnArr\" :key=\"i\" :class=\"{active:i===myCurrentPage}\">{{i}}</a>\n    <span v-if=\"pager.end<pager.pageCount\">...</span>\n    <a @click=\"changePager(myCurrentPage+1)\" v-if=\"myCurrentPage<pager.pageCount\" href=\"javascript:;\">下一页</a>\n    <a v-else href=\"javascript:;\" class=\"disabled\">下一页</a>\n  </div>\n</template>\n<script>\nimport { computed, ref, watch } from 'vue'\nexport default {\n  name: 'XtxPagination',\n  props: {\n    total: {\n      type: Number,\n      default: 100\n    },\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    currentPage: {\n      type: Number,\n      default: 1\n    }\n  },\n  setup (props, { emit }) {\n    // 需要数据：\n    // 1. 约定按钮的个数 5 个，如果成为动态的需要设置响应式数据\n    const count = 5\n    // 2. 当前显示的页码\n    const myCurrentPage = ref(1)\n    // 3. 总页数 = 总条数 / 每一页条数  向上取整\n    const myTotal = ref(100)\n    const myPageSize = ref(10)\n    // 其他数据（总页数，起始按钮，结束按钮，按钮数组）依赖上面数据得到\n    const pager = computed(() => {\n      // 总页数\n      const pageCount = Math.ceil(myTotal.value / myPageSize.value)\n      // 按钮个和当前页码 ====> 起始按钮，结束按钮，按钮数组\n      // 1. 理想情况下：\n      const offset = Math.floor(count / 2)\n      let start = myCurrentPage.value - offset\n      let end = start + count - 1\n      // 2. 如果起始页码小于1需要处理\n      if (start < 1) {\n        start = 1\n        end = (start + count - 1) > pageCount ? pageCount : (start + count - 1)\n      }\n      // 3. 如果结束页码大于总页数需要处理\n      if (end > pageCount) {\n        end = pageCount\n        start = (end - count + 1) < 1 ? 1 : (end - count + 1)\n      }\n      const btnArr = []\n      for (let i = start; i <= end; i++) {\n        btnArr.push(i)\n      }\n      // 提供计算属性数据\n      return {\n        pageCount,\n        btnArr,\n        start,\n        end\n      }\n    })\n\n    // 监听props的变化，更新组件内部数据\n    watch(props, () => {\n      myTotal.value = props.total\n      myPageSize.value = props.pageSize\n      myCurrentPage.value = props.currentPage\n    }, { immediate: true })\n\n    // 切换分页函数\n    const changePager = (page) => {\n      // 页码相同不作为\n      if (myCurrentPage.value !== page) {\n        myCurrentPage.value = page\n        // 通知父组件\n        emit('current-change', page)\n      }\n    }\n\n    return { myCurrentPage, pager, changePager }\n  }\n}\n</script>\n<style scoped lang=\"less\">\n.xtx-pagination {\n  display: flex;\n  justify-content: center;\n  padding: 30px;\n  > a {\n    display: inline-block;\n    padding: 5px 10px;\n    border: 1px solid #e4e4e4;\n    border-radius: 4px;\n    margin-right: 10px;\n    &:hover {\n      color: @xtxColor;\n    }\n    &.active {\n      background: @xtxColor;\n      color: #fff;\n      border-color: @xtxColor;\n    }\n    &.disabled {\n      cursor: not-allowed;\n      opacity: 0.4;\n      &:hover {\n        color: #333\n      }\n    }\n  }\n  > span {\n    margin-right: 10px;\n  }\n}\n</style>\n"]}]}